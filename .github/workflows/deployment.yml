name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Compress Project Files
        run: |
          ls -la  # List all files before compression
          tar --warning=no-file-changed --exclude='.git' --exclude='node_modules' -czvf app.tar.gz . || echo "Error: $?"
          ls -la app.tar.gz  # Verify the archive was created

      - name: Clear previous build on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo rm -rf ~/full_stack_template
            mkdir ~/full_stack_template

      - name: Copy Project Files to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "app.tar.gz"
          target: ~/full_stack_template
          timeout: 300s          # Increase timeout to 5 minutes
          command_timeout: 20m   # Increase command timeout
          debug: true           # Enable debugging
          use_insecure_cipher: true

      - name: Setup SSH and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/deploy_key
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST "
            cd ~/meal_prep &&
            sudo tar -xzf app.tar.gz &&

            # Install Docker if not exists
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...' &&
              sudo apt-get update &&
              sudo apt-get install -y ca-certificates curl gnupg &&
              sudo install -m 0755 -d /etc/apt/keyrings &&
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &&
              sudo chmod a+r /etc/apt/keyrings/docker.gpg &&
              echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(. /etc/os-release && echo \$VERSION_CODENAME) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
              sudo apt-get update &&
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi &&

            # Install Docker Compose if not exists
            if ! command -v docker-compose &> /dev/null; then
              echo 'Installing Docker Compose...' &&
              sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose &&
              sudo chmod +x /usr/local/bin/docker-compose
            fi &&
            
            # Stop containers
            docker-compose -f docker-compose.prod.yml --env-file .env down &&
            
            # Clean Docker system
            docker system prune -f &&
            docker image prune -f &&
            
            # Clean volumes except DB
            for vol in \$(docker volume ls -q -f \"dangling=true\"); do
              if [ \"\$vol\" != \"meal_prep_app-db-data\" ]; then
                docker volume rm \$vol
              fi
            done &&
            
            # Clean networks
            docker network prune -f &&
            
            # Rebuild and start
            docker-compose -f docker-compose.prod.yml --env-file .env up -d --build
          "

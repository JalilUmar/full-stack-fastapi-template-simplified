version: "3.9"

services:
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    networks:
      - db-network
  adminer:
    image: adminer
    restart: always
    networks:
      - db-network
    depends_on:
      - db
    ports:
      - 8080:8080
  backend:
    build: ./backend
    ports:
      - 8000:8000
    networks:
      - db-network
      - app-network
    env_file:
      - .env
    volumes:
      - ./backend:/app
    command:
      - --reload
    depends_on:
      db:
        condition: service_healthy
        restart: true
  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_LINK: ${NEXT_PUBLIC_API_LINK}
    networks:
      - app-network
    ports:
      - 3000:3000
    depends_on:
      - backend
    env_file:
      - .env
    environment:
    - NEXT_PUBLIC_API_LINK=${NEXT_PUBLIC_API_LINK}
    volumes:
      - ./frontend:/app
      - /app/node_modules
  proxy:
    image: nginx:alpine
    container_name: web-proxy
    restart: unless-stopped
    volumes:
      - ./proxy.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    depends_on:
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
volumes:
  app-db-data: